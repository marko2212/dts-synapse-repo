{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"workspaceName": {
			"type": "string",
			"metadata": "Workspace name",
			"defaultValue": "synapsedtsws"
		},
		"synapsedtsws-WorkspaceDefaultSqlServer_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'synapsedtsws-WorkspaceDefaultSqlServer'"
		},
		"ls_dl_asa_dts_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'ls_dl_asa_dts'"
		},
		"ls_asql_db_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'ls_asql_db'"
		},
		"synapsedtsws-WorkspaceDefaultStorage_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://dlsynapsedts.dfs.core.windows.net"
		},
		"ls_dl_asa_dts_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://dlsynapsedts.dfs.core.windows.net/"
		},
		"ls_HttpServer12_JSON_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://opendata.stat.gov.rs"
		},
		"ls_HttpServer1_test_json_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://opendata.stat.gov.rs/data/WcfJsonRestService.Service1.svc/dataset/1802010301IND01/1/json"
		}
	},
	"variables": {
		"workspaceId": "[concat('Microsoft.Synapse/workspaces/', parameters('workspaceName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('workspaceName'), '/default')]",
			"type": "Microsoft.Synapse/workspaces/managedVirtualNetworks",
			"apiVersion": "2019-06-01-preview",
			"properties": {},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/WorkspaceSystemIdentity')]",
			"type": "Microsoft.Synapse/workspaces/credentials",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "ManagedIdentity",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/synapsedtsws-WorkspaceDefaultSqlServer')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"parameters": {
					"DBName": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"connectionString": "[parameters('synapsedtsws-WorkspaceDefaultSqlServer_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/synapsedtsws-WorkspaceDefaultStorage')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('synapsedtsws-WorkspaceDefaultStorage_properties_typeProperties_url')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ls_dl_asa_dts')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('ls_dl_asa_dts_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('ls_dl_asa_dts_accountKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ls_asql_db')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('ls_asql_db_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/PowerBIWorkspace1')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "PowerBIWorkspace",
				"typeProperties": {
					"workspaceID": "76db11ad-63a4-4680-a40f-0b39bcf26217",
					"tenantID": "b2262124-fdf2-4f26-bfec-fc5538b4dbe1"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ls_HttpServer12_JSON')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "HttpServer",
				"typeProperties": {
					"url": "[parameters('ls_HttpServer12_JSON_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Anonymous"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ls_HttpServer1_test_json')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "HttpServer",
				"typeProperties": {
					"url": "[parameters('ls_HttpServer1_test_json_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Anonymous"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/trg_copy_dl_to_sql')]",
			"type": "Microsoft.Synapse/workspaces/triggers",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Copy all from datalake to SQL stg tables",
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "pip_copy_all_dl_sql",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Week",
						"interval": 1,
						"startTime": "2022-05-10T18:49:00",
						"timeZone": "Central Europe Standard Time",
						"schedule": {
							"minutes": [
								0
							],
							"hours": [
								7
							],
							"weekDays": [
								"Friday"
							]
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/pipelines/pip_copy_all_dl_sql')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/trg_transf_all')]",
			"type": "Microsoft.Synapse/workspaces/triggers",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "pip_transf_all",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Week",
						"interval": 1,
						"startTime": "2022-06-10T11:22:00",
						"timeZone": "Central Europe Standard Time",
						"schedule": {
							"minutes": [
								0
							],
							"hours": [
								8
							],
							"weekDays": [
								"Friday"
							]
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/pipelines/pip_transf_all')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/trg_ml')]",
			"type": "Microsoft.Synapse/workspaces/triggers",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "pip_ml",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Week",
						"interval": 1,
						"startTime": "2022-07-10T20:49:00Z",
						"timeZone": "UTC",
						"schedule": {
							"minutes": [
								0
							],
							"hours": [
								11
							],
							"weekDays": [
								"Friday"
							]
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/pipelines/pip_ml')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/tr_exec_all_pipl')]",
			"type": "Microsoft.Synapse/workspaces/triggers",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "pip_exec_all_piplines",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Week",
						"interval": 1,
						"startTime": "2022-07-13T22:12:00Z",
						"timeZone": "UTC",
						"schedule": {
							"minutes": [
								0
							],
							"hours": [
								11
							],
							"weekDays": [
								"Monday",
								"Tuesday",
								"Wednesday",
								"Thursday",
								"Friday"
							]
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/pipelines/pip_exec_all_piplines')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SparkSmall')]",
			"type": "Microsoft.Synapse/workspaces/bigDataPools",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"autoPause": {
					"enabled": true,
					"delayInMinutes": 5
				},
				"autoScale": {
					"enabled": true,
					"maxNodeCount": 3,
					"minNodeCount": 3
				},
				"nodeCount": 10,
				"nodeSize": "Small",
				"nodeSizeFamily": "MemoryOptimized",
				"sparkVersion": "3.1",
				"isComputeIsolationEnabled": false,
				"sessionLevelPackagesEnabled": true,
				"annotations": []
			},
			"dependsOn": [],
			"location": "westeurope"
		},
		{
			"name": "[concat(parameters('workspaceName'), '/pip_transf_all')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Stored procedure povrat brend",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "pip_sp_komis",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[prc].[PovratBrend]"
						},
						"linkedServiceName": {
							"referenceName": "ls_asql_db",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "pip_sp_komis",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Stored procedure komis_brend",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[prc].[Komision]"
						},
						"linkedServiceName": {
							"referenceName": "ls_asql_db",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Stored procedure komis_brend",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[prc].[KomisionBrend]"
						},
						"linkedServiceName": {
							"referenceName": "ls_asql_db",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Stored procedure Povrat",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Stored procedure povrat brend",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[prc].[Povrat]"
						},
						"linkedServiceName": {
							"referenceName": "ls_asql_db",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "DTS"
				},
				"annotations": [],
				"lastPublishTime": "2022-06-10T12:32:11Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/ls_asql_db')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/pip_copy_all_dl_sql')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Copy mat_csv_to_sql",
						"description": "",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Copy pos_xlsx_to_sql",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "Truncate table stg.materijal",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "SIFRA_MATERIJALA",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "SIFRA_MATERIJALA",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "BROJ_KOMADA_U_KART",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "BROJ_KOMADA_U_KART",
											"type": "Int32",
											"physicalType": "int"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ds_dl_mat_csv",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_sql_mat",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Copy odel_csv_to_sql",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Copy mat_csv_to_sql",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "TRUNCATE TABLE stg.odeljak",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "Odeljak",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "ODELJAK",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Brend",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "BREND",
											"type": "String",
											"physicalType": "varchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ds_dl_odelj_csv",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_sql_odelj",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Copy pos_xlsx_to_sql",
						"description": "",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Copy sap_csv_sql",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ExcelSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"wildcardFileName": "*20*",
									"enablePartitionDiscovery": false
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "TRUNCATE TABLE stg.evidencijaPOS",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "datum",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "DATUM",
											"type": "DateTime",
											"physicalType": "date"
										}
									},
									{
										"source": {
											"name": "brend",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "BREND_ORIG",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "šifra brenda",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "SIFRA_BRENDA",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "vrsta dokumenta",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "VRSTA_DOKUMENTA",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "broj stavki",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "BROJ_STAVKI",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "broj paleta",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "BROJ_PALETA",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "Broj kartona povrat",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "BROJ_KARTONA_POVRAT",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "Broj komada povrata",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "BROJ_KOMADA_POVRAT",
											"type": "Int32",
											"physicalType": "int"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ds_dl_pos_xlsx",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_sql_pos",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Copy sap_csv_sql",
						"description": "",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"wildcardFileName": "DMD_20*",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "TRUNCATE TABLE stg.sap",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "WBSTK",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "WBSTK",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "PRIMALAC_ROBE",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "PRIMALAC_ROBE",
											"type": "Int64",
											"physicalType": "bigint"
										}
									},
									{
										"source": {
											"name": "TIP_ISPORUKE",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "TIP_ISPORUKE",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "STVARNI_DATUM_ISPORUKE",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "STVARNI_DATUM_ISPORUKE",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "MATERIJAL",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "MATERIJAL",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "KOLICINA",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "KOLICINA",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "SKLADISNA_LOKACIJA",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "SKLADISNA_LOKACIJA",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "POGON",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "POGON",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "ODELJAK",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "ODELJAK",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "SIFRA_RAZLOGA_POVRATA",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "SIFRA_RAZLOGA_POVRATA",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "OPIS_RAZLOGA_POVRATA",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "OPIS_RAZLOGA_POVRATA",
											"type": "String",
											"physicalType": "varchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ds_dl_sap_csv",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_sql_stg_sap",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "DTS"
				},
				"annotations": [],
				"lastPublishTime": "2022-06-10T12:31:37Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/ds_dl_mat_csv')]",
				"[concat(variables('workspaceId'), '/datasets/ds_sql_mat')]",
				"[concat(variables('workspaceId'), '/datasets/ds_dl_odelj_csv')]",
				"[concat(variables('workspaceId'), '/datasets/ds_sql_odelj')]",
				"[concat(variables('workspaceId'), '/datasets/ds_dl_pos_xlsx')]",
				"[concat(variables('workspaceId'), '/datasets/ds_sql_pos')]",
				"[concat(variables('workspaceId'), '/datasets/ds_dl_sap_csv')]",
				"[concat(variables('workspaceId'), '/datasets/ds_sql_stg_sap')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/pip_ml')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Notebook ML model pord",
						"type": "SynapseNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebook": {
								"referenceName": "Notebook_ML_Model_Prod",
								"type": "NotebookReference"
							},
							"snapshot": true,
							"sparkPool": {
								"referenceName": "SparkSmall",
								"type": "BigDataPoolReference"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "DTS"
				},
				"annotations": [],
				"lastPublishTime": "2022-07-10T20:52:13Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/notebooks/Notebook_ML_Model_Prod')]",
				"[concat(variables('workspaceId'), '/bigDataPools/SparkSmall')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/pip_exec_all_piplines')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Execute Pipeline copy all data",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pip_copy_all_dl_sql",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Execute Pipeline transf_all",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Execute Pipeline copy all data",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pip_transf_all",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Execute Pipeline ml",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Execute Pipeline transf_all",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pip_ml",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "DTS"
				},
				"annotations": [],
				"lastPublishTime": "2022-07-13T22:18:42Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/pipelines/pip_copy_all_dl_sql')]",
				"[concat(variables('workspaceId'), '/pipelines/pip_transf_all')]",
				"[concat(variables('workspaceId'), '/pipelines/pip_ml')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/pip_http_json_datalake')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "HttpReadSettings",
									"requestMethod": "GET"
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "ds_http_json",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_json_to_datalake",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2022-08-23T12:51:34Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/ds_http_json')]",
				"[concat(variables('workspaceId'), '/datasets/ds_json_to_datalake')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ds_sql_stg_sap')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_asql_db",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "stg",
					"table": "sap"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/ls_asql_db')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ds_dl_sap_csv')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_dl_asa_dts",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "DMD_2020.csv",
						"folderPath": "dmd/SAP",
						"fileSystem": "row"
					},
					"columnDelimiter": "|",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/ls_dl_asa_dts')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ds_dl_mat_csv')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_dl_asa_dts",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "Mat_fix.csv",
						"folderPath": "dmd/Materijal",
						"fileSystem": "row"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "SIFRA_MATERIJALA",
						"type": "String"
					},
					{
						"name": "BROJ_KOMADA_U_KART",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/ls_dl_asa_dts')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ds_sql_mat')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_asql_db",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "SIFRA_MATERIJALA",
						"type": "int",
						"precision": 10
					},
					{
						"name": "BROJ_KOMADA_U_KART",
						"type": "int",
						"precision": 10
					}
				],
				"typeProperties": {
					"schema": "stg",
					"table": "materijal"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/ls_asql_db')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ds_dl_odeljak_csv')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_dl_asa_dts",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "Odeljak.csv",
						"folderPath": "dmd/SAP",
						"fileSystem": "row"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Odeljak",
						"type": "String"
					},
					{
						"name": "BRAND",
						"type": "String"
					},
					{
						"name": "Opis",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/ls_dl_asa_dts')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ds_dl_pos_xlsx')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_dl_asa_dts",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Excel",
				"typeProperties": {
					"sheetName": "baza urađenih naloga",
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "evidencija_urađenih_naloga_POS_2020.xlsx",
						"folderPath": "dmd/POS",
						"fileSystem": "row"
					},
					"range": "A9:K1000000",
					"firstRowAsHeader": true
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/ls_dl_asa_dts')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ds_sql_pos')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_asql_db",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "DATUM",
						"type": "date"
					},
					{
						"name": "BREND_ORIG",
						"type": "varchar"
					},
					{
						"name": "SIFRA_BRENDA",
						"type": "varchar"
					},
					{
						"name": "VRSTA_DOKUMENTA",
						"type": "varchar"
					},
					{
						"name": "BROJ_STAVKI",
						"type": "int",
						"precision": 10
					},
					{
						"name": "BROJ_PALETA",
						"type": "int",
						"precision": 10
					},
					{
						"name": "BROJ_KARTONA_POVRAT",
						"type": "int",
						"precision": 10
					},
					{
						"name": "BROJ_KOMADA_POVRAT",
						"type": "int",
						"precision": 10
					}
				],
				"typeProperties": {
					"schema": "stg",
					"table": "evidencijaPOS"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/ls_asql_db')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ds_dl_odelj_csv')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_dl_asa_dts",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "Odeljak_fix.csv",
						"folderPath": "dmd/Odeljak",
						"fileSystem": "row"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Odeljak",
						"type": "String"
					},
					{
						"name": "Brend",
						"type": "String"
					},
					{
						"name": "Opis",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/ls_dl_asa_dts')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ds_sql_odelj')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_asql_db",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "ODELJAK",
						"type": "int",
						"precision": 10
					},
					{
						"name": "BREND",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "stg",
					"table": "odeljak"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/ls_asql_db')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ds_dl_to_sql_2')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_dl_asa_dts",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "DMD_2020.csv",
						"folderPath": "dmd/SAP",
						"fileSystem": "row"
					},
					"columnDelimiter": "|",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "DOKUMENT_ISPORUKE|STAVKA|OBLAST_PRODAJE|WBSTK|PRIMALAC_ROBE|TIP_ISPORUKE|TIP_PROD_DOK|DATUM_ISPORUKE|DOBAVLJAC|PLANIRANI_DATUM_ISPORUKE|STVARNI_DATUM_ISPORUKE|MATERIJAL|KOLICINA|SKLADISNA_LOKACIJA|POGON|ODELJAK|SIFRA_RAZLOGA_POVRATA|OPIS_RAZLOGA_POVRATA",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/ls_dl_asa_dts')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ds_csv_to_datalake')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_dl_asa_dts",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Testing http"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "test.csv",
						"fileSystem": "row"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/ls_dl_asa_dts')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ds_dl_file_list')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_dl_asa_dts",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Testing http"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "open_data_file_list.json",
						"fileSystem": "row"
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"sourceRelativeURL": {
							"type": "string"
						},
						"sinkFileName": {
							"type": "string"
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/ls_dl_asa_dts')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ds_json_to_datalake')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_dl_asa_dts",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Testing http"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "test2.json",
						"fileSystem": "row"
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/ls_dl_asa_dts')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ds_http_csv')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_HttpServer12_JSON",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Testing http"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "HttpServerLocation",
						"relativeUrl": "cloudboxacademy/covid19/main/ecdc_data/testing.csv"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/ls_HttpServer12_JSON')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ds_http_json')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_HttpServer12_JSON",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Testing http"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "HttpServerLocation",
						"relativeUrl": "data/WcfJsonRestService.Service1.svc/dataset/1802010301IND01/1/json"
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/ls_HttpServer12_JSON')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AutoResolveIntegrationRuntime')]",
			"type": "Microsoft.Synapse/workspaces/integrationRuntimes",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "AutoResolve",
						"dataFlowProperties": {
							"computeType": "General",
							"coreCount": 8,
							"timeToLive": 0,
							"cleanup": true
						},
						"pipelineExternalComputeScaleProperties": {
							"timeToLive": 60
						}
					}
				},
				"managedVirtualNetwork": {
					"type": "ManagedVirtualNetworkReference",
					"referenceName": "default"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/managedVirtualNetworks/default')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/default/synapse-ws-sql--synapsedtsws')]",
			"type": "Microsoft.Synapse/workspaces/managedVirtualNetworks/managedPrivateEndpoints",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"privateLinkResourceId": "/subscriptions/3d1a0d9a-7e0f-434a-bb08-b3b842299587/resourceGroups/Synapse_Analytics/providers/Microsoft.Synapse/workspaces/synapsedtsws",
				"groupId": "sql",
				"fqdns": [
					"synapsedtsws.7fef4202-f825-4c26-829b-af5c2e2a7226.sql.azuresynapse.net"
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/managedVirtualNetworks/default')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/default/synapse-ws-sqlOnDemand--synapsedtsws')]",
			"type": "Microsoft.Synapse/workspaces/managedVirtualNetworks/managedPrivateEndpoints",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"privateLinkResourceId": "/subscriptions/3d1a0d9a-7e0f-434a-bb08-b3b842299587/resourceGroups/Synapse_Analytics/providers/Microsoft.Synapse/workspaces/synapsedtsws",
				"groupId": "sqlOnDemand",
				"fqdns": [
					"synapsedtsws-ondemand.7fef4202-f825-4c26-829b-af5c2e2a7226.sql.azuresynapse.net"
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/managedVirtualNetworks/default')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Notebook_ML_Model_Prod')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "SparkSmall",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"runAsWorkspaceSystemIdentity": false,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "50433dbf-a095-4ed0-a1c8-c0eeda1ef759"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/3d1a0d9a-7e0f-434a-bb08-b3b842299587/resourceGroups/Synapse_Analytics/providers/Microsoft.Synapse/workspaces/synapsedtsws/bigDataPools/SparkSmall",
						"name": "SparkSmall",
						"type": "Spark",
						"endpoint": "https://synapsedtsws.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/SparkSmall",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net",
							"authHeader": null
						},
						"sparkVersion": "3.1",
						"nodeCount": 10,
						"cores": 4,
						"memory": 28,
						"extraHeader": null
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"## Import library"
						],
						"attachments": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"import numpy as np\r\n",
							"import pandas as pd\r\n",
							"from pandas.plotting import autocorrelation_plot\r\n",
							"import matplotlib as mpl\r\n",
							"import matplotlib.pyplot as pyplot\r\n",
							"import matplotlib.pyplot as plt\r\n",
							"import seaborn as sns\r\n",
							"from datetime import datetime, timedelta\r\n",
							"import time\r\n",
							"from dateutil.parser import parse \r\n",
							"import math\r\n",
							"from sklearn.metrics import r2_score, mean_squared_error, mean_absolute_error   # metrics\r\n",
							"from statsmodels.tsa.seasonal import seasonal_decompose\r\n",
							"from statsmodels.graphics.tsaplots import plot_pacf\r\n",
							"from statsmodels.tsa.statespace.sarimax import SARIMAX\r\n",
							"from statsmodels.tsa.ar_model import AutoReg\r\n",
							"from statsmodels.tsa.arima.model import ARIMA\r\n",
							"import pmdarima as pm\r\n",
							"\r\n",
							"import warnings\r\n",
							"warnings.simplefilter(\"ignore\")\r\n",
							"\r\n",
							"pyplot.rcParams.update({'figure.figsize': (10, 7), 'figure.dpi': 120})\r\n",
							"print('lib are imported')"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 17
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"### Evaluating the models with data - create function"
						],
						"attachments": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"def metric_table(test, predictions):\r\n",
							"  mse = mean_squared_error(test, predictions)\r\n",
							"  model_r2, model_RMSE, model_MAE, model_MSE, model_Adj_R2 = [], [], [], [], []\r\n",
							"\r\n",
							"  r2 = r2_score(test, predictions)\r\n",
							"  rmse = np.sqrt(mean_squared_error(test, predictions))\r\n",
							"  mae = mean_absolute_error(test, predictions)\r\n",
							"  mse = mean_squared_error(test, predictions)\r\n",
							"  # mape = mean_absolute_percentage_error(test, predictions)\r\n",
							"  adj_r2 = 1-(1-r2)*(test.shape[0]-1)/(test.shape[0]-1-1)\r\n",
							"\r\n",
							"  model_r2.append(r2)\r\n",
							"  model_RMSE.append(rmse)\r\n",
							"  model_MAE.append(mae)\r\n",
							"  model_MSE.append(mse)\r\n",
							"  # model_MAPE.append(mape)\r\n",
							"  model_Adj_R2.append(adj_r2)\r\n",
							"\r\n",
							"  df_result = pd.DataFrame({\"R2\":model_r2, \"Adj_R2\": model_Adj_R2, \"RMSE\": model_RMSE, \"MAE\":model_MAE, \"MSE\": model_MSE})\r\n",
							"  df_result = round(df_result,3)\r\n",
							"  df_result = df_result.sort_values(\"R2\", ascending=False)\r\n",
							"  df_result\r\n",
							"  return df_result"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 18
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"### Create function that add all missing date"
						],
						"attachments": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"def add_all_date(df, whitout_sun=0):\r\n",
							"  rng = pd.date_range(start = df.index[0], end =df.index[-1],  freq='D')        # pocetni datum je prvi index (datum), rajnji datum je poslednji red indexa\r\n",
							"  df_date_temp = pd.DataFrame({ 'DATUM': rng}) \r\n",
							"  if whitout_sun == 1:\r\n",
							"    df_date_temp = df_date_temp[df_date_temp['DATUM'].dt.weekday != 6]          # removing sunday (6) from dummy df_date_temp\r\n",
							"  df_date_temp.set_index('DATUM', inplace=True)                                 # set column date as index\r\n",
							"  df = df[df.index.weekday != 6]                                                # removing sunday (6) from df\r\n",
							"  df = df_date_temp.join(df)                                                    # left join dataset on dummy date\r\n",
							"  df = df.fillna(0)                                                             # fill NaN values with 0\r\n",
							"  df = df.iloc[:,-1:].astype(int)                                               # convert string to int\r\n",
							"  return df"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 19
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"#### Azure database connection string"
						],
						"attachments": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": true,
								"outputs_hidden": true
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# credentials\r\n",
							"jdbcHostname = \"srv-db-sql-dmd.database.windows.net\"\r\n",
							"jdbcDatabase = \"db-sql-dmd\"\r\n",
							"jdbcPort = \"1433\"\r\n",
							"username = \"marko\"\r\n",
							"password = \"5Avramovic!\"\r\n",
							"jdbcUrl = \"jdbc:sqlserver://{0}:{1};database={2}\".format(jdbcHostname, jdbcPort, jdbcDatabase)\r\n",
							"connectionProperties = {\r\n",
							"    \"user\" : username,\r\n",
							"    \"password\" : password,\r\n",
							"    \"driver\" : \"com.microsoft.sqlserver.jdbc.SQLServerDriver\"\r\n",
							"}"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 20
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"### Create arima function"
						],
						"attachments": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"def arima(df):\r\n",
							"    n = 30\r\n",
							"    order = [28,0,0]\r\n",
							"    order = [3,0,0]\r\n",
							"    model = ARIMA(df, order=(order))\r\n",
							"    model_fit = model.fit()\r\n",
							"    prediction = model_fit.forecast(n)\r\n",
							"\r\n",
							"    # korekcije\r\n",
							"    prediction = prediction.clip(lower=0)                           # sve negativne vrednosti svedi na 0\r\n",
							"    prediction = add_all_date(prediction)                           # set sundey to 0\r\n",
							"    prediction = prediction.rename(columns={'predicted_mean': item})        # set the name of column as item\r\n",
							"    prediction.head()\r\n",
							"\r\n",
							"    # ako prediction_contaier ne postoji kreiraj ga od prve predikcije, u suprotnom dodaj novu predikciju na prediction_contaier\r\n",
							"    if 'prediction_contaier' not in globals():  \r\n",
							"        # print('not exist')   \r\n",
							"        global prediction_contaier          \r\n",
							"        prediction_contaier = prediction\r\n",
							"    else:\r\n",
							"        # print('exist')             \r\n",
							"        prediction_contaier =  prediction_contaier.join(prediction, how='left', lsuffix='_left', rsuffix='_right')\r\n",
							"    return prediction_contaier"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 21
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"#### Create import dataset total function"
						],
						"attachments": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"def import_ds_total(item, brend, table):\r\n",
							"    pushdown_query = \"(SELECT DATUM, {0} FROM {2} ) {1}\".format(item,brend,table) \r\n",
							"    df_spark = spark.read.jdbc(url=jdbcUrl, table=pushdown_query, properties=connectionProperties)\r\n",
							"    df = df_spark.toPandas()                      # Spark df to Pandas df\r\n",
							"    df = df.sort_values(by=\"DATUM\")               # Sort dataframe by date\r\n",
							"    df.set_index('DATUM', inplace=True)           # convert DATUM column to index\r\n",
							"    df.index = pd.to_datetime(df.index)           # convert index to datetime\r\n",
							"    df = add_all_date(df, )                       # add all missing date with (df, 0) or without (df, 1) sunday\r\n",
							"    df.head(2)\r\n",
							"    return df \r\n",
							""
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 22
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"### Train ARIMA model and prediction"
						],
						"attachments": null
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"### Loop brends - import dataset and applay arima (using custom function)"
						],
						"attachments": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Delete prediction_container\r\n",
							"if 'prediction_contaier' in globals(): \r\n",
							"    del prediction_contaier\r\n",
							"    print('deleted')\r\n",
							"\r\n",
							"# set brend and table\r\n",
							"# STAVKE_NA_KOMIS_NALOGU, KOMIS_NALOG, POVRAT_KARTON, POVRAT_KOMAD,  komisionAggFinal,  povratAggFinal\r\n",
							"brend = 'Grupno'\r\n",
							"table = 'src.komisionAggFinal'"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 23
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"# connect to database with credentials, execut SQL \r\n",
							"item = 'STAVKE_NA_KOMIS_NALOGU'\r\n",
							"df = import_ds_total(item, brend, table)\r\n",
							"\r\n",
							"# call arima function on dataset\r\n",
							"prediction_contaier = arima(df)\r\n",
							"prediction_contaier.head(2)"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 24
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"# connect to database with credentials, execut SQL \r\n",
							"item = 'KOMIS_NALOG'\r\n",
							"df = import_ds_total(item, brend, table)\r\n",
							"\r\n",
							"# call custom arima function on dataset\r\n",
							"prediction_contaier = arima(df)\r\n",
							"prediction_contaier.head(2)"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 25
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# connect to database with credentials, execut SQL \r\n",
							"item = 'POVRAT_KARTON'\r\n",
							"table = 'src.povratAggFinal'\r\n",
							"\r\n",
							"df = import_ds_total(item, brend, table)\r\n",
							"\r\n",
							"# call arima function on dataset\r\n",
							"prediction_contaier = arima(df)\r\n",
							"prediction_contaier.head(2)"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 26
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# connect to database with credentials, execut SQL \r\n",
							"item = 'POVRAT_KOMAD'\r\n",
							"df = import_ds_total(item, brend, table)\r\n",
							"\r\n",
							"# call arima function on dataset\r\n",
							"prediction_contaier = arima(df)\r\n",
							"prediction_contaier.head(2)"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 27
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"### Covert prediction_contaier index to column and store on blob storage"
						],
						"attachments": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# covert index to column\r\n",
							"prediction_contaier['DATUM'] = prediction_contaier.index                      \r\n",
							"# sat DATUM column to be first\r\n",
							"column_name = list(prediction_contaier.columns.values)\r\n",
							"column_name_wo_datum = column_name\r\n",
							"column_name_wo_datum.remove('DATUM')\r\n",
							"prediction_contaier = prediction_contaier[['DATUM'] + column_name_wo_datum]\r\n",
							"prediction_contaier.head()\r\n",
							"\r\n",
							"\r\n",
							"# Store prediction_contaier to blbo storage using skpark\r\n",
							"folder_name = brend\r\n",
							"(sqlContext.createDataFrame(prediction_contaier)\r\n",
							" .coalesce(1)\r\n",
							" .write\r\n",
							" .mode(\"overwrite\")\r\n",
							" .option(\"header\", \"true\")\r\n",
							" .format(\"com.databricks.spark.csv\")\r\n",
							" .save('abfss://processed@dlsynapsedts.dfs.core.windows.net/dmd/' + folder_name))"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 28
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"prediction_contaier.head(10)"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 29
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Write prediction_contaier df to Azure SQL database using spark"
						],
						"attachments": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"predictionGrupnoDF = spark.createDataFrame(prediction_contaier)                   # Create PySpark DataFrame from Pandas\r\n",
							"predictionGrupnoDF.write.jdbc(url=jdbcUrl, table=\"src.predictionGrupno\", properties=connectionProperties, mode =\"overwrite\")"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 30
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"predictionGrupnoDF.show()"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 31
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"### Graph"
						],
						"attachments": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": true
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# pyplot.figure(figsize=(18, 6), dpi=80)       # adjust graph size\r\n",
							"# pyplot.plot(prediction, color='red', label='prediction')\r\n",
							"# pyplot.legend(loc=\"upper left\")\r\n",
							"# pyplot.show()"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 32
					}
				]
			},
			"dependsOn": []
		}
	]
}